/*
 * node.cpp
 *
 *  Created on: Feb 6, 2019
 *      Author: michelemaresca
 */
#include <iostream>
using namespace std;

namespace michele_maresca{
template <class Item>
void list_head_insert(node<Item>*& head_ptr,const Item& new_coef,const Item& new_exp){
head_ptr=new node<Item>(new_coef,new_exp,head_ptr);
}

template <class Item>
void list_insert(node<Item>* previous_ptr,const Item& new_coef,const Item& new_exp){
	node<Item>* insert_ptr;
	insert_ptr=new node<Item>(new_coef,new_exp,previous_ptr->link());
	previous_ptr->set_link(insert_ptr);
}

template <class Item>
void list_clear(node<Item>*& head_ptr){
	while(head_ptr != NULL ){
		list_head_remove(head_ptr);
	}
}

template <class Item>
void list_head_remove(node<Item>*& head_ptr){
	node<Item>* remove_ptr;
	remove_ptr=head_ptr;
	head_ptr=head_ptr->link();
}

template <class Item>
void list_copy(const node<Item>* source_ptr,node<Item>*& head_ptr, node<Item>*& tail_ptr){
	head_ptr=NULL;
	tail_ptr=NULL;

	if(source_ptr == NULL)
		return;

	list_head_insert(head_ptr,source_ptr->coef(),source_ptr->exp());
	tail_ptr=head_ptr;

	source_ptr=source_ptr->link();
	while(source_ptr != NULL){
		list_insert(tail_ptr,source_ptr->coef(),source_ptr->exp());
		tail_ptr=tail_ptr->link();
		source_ptr=source_ptr->link();
	}
}


template <class Item>
void list_print(node<Item>* head_ptr){
	node<Item>* cursor;
	for(cursor=head_ptr;cursor != NULL;cursor=cursor->link()){
		if(cursor->exp() == 0){
			cout<<cursor->coef();
		}else if(cursor->exp() == 1){
			cout<<cursor->coef()<<"x";
		}else{
			cout<<cursor->coef()<<"x^"<<cursor->exp();
		}
		if(cursor->link() != NULL){
			cout<<" + ";
		}
	}
}

template <class Item>
void list_insert_ord(node<Item>*& head_ptr,const Item& new_coef,const Item& new_exp){
	node<Item>* cursor;
	if(head_ptr == NULL){
		list_head_insert(head_ptr,new_coef,new_exp);
		return;
	}else if(head_ptr->exp() == new_exp){
		head_ptr->set_coef(head_ptr->coef()+new_coef);
		return ;
	}else if(head_ptr->exp() > new_exp){
		list_head_insert(head_ptr,new_coef,new_exp);
		return;
	}else{
		for(cursor=head_ptr;cursor != NULL;cursor=cursor->link()){
			if(cursor->exp() == new_exp){
				cursor->set_coef(cursor->coef()+new_coef);
				return ;
			}else if(cursor->exp() > new_exp){
				list_insert(cursor,new_coef,new_exp);
				return;
			}else if(cursor->link() == NULL){
			list_insert(cursor,new_coef,new_exp);
			return;
			}
		}
	}
}





}

