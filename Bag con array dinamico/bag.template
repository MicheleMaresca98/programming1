/*
 * bag.cpp
 *
 *  Created on: Feb 1, 2019
 *      Author: michelemaresca
 */




#include <algorithm>
#include <cassert>
#include <cstdlib>
using namespace std;
namespace michele_maresca{


template <class Item>
const typename bag<Item>::size_type bag<Item>::DEFAULT_CAPACITY;

template <class Item>
bag<Item>::bag(size_type initial_capacity){
	data = new Item[initial_capacity];
	capacity=initial_capacity;
	used=0;
}

template <class Item>
bag<Item>::bag(const bag<Item>& source){
	data = new value_type[source.capacity];
	capacity=source.capacity;
	used=source.used;
	copy(source.data,source.data + used,data);	//beginning location(dove deve iniziare a copiare),
					   	   	   	   	   	   	    //ending location(fino a dove deve copiare),
											    //destinazione(dove deve ricopiare tutto)
}

template <class Item>
bag<Item>::~bag(){
	delete [ ] data;
}

template <class Item>
	void bag<Item>::reserve(size_type new_capacity){

	Item* larger_array;

	if(new_capacity==capacity)
		return;

	if(new_capacity < used)
		new_capacity=used;

	larger_array= new Item[new_capacity];
	copy(data,data+used,larger_array);
	delete [] data;
	data=larger_array;
	capacity=new_capacity;


}


template <class Item>
	typename bag<Item>::size_type bag<Item>::erase(const value_type& target){
size_type many_removed=0,index=0;

while(index<used){
	if(data[index]==target){
	--used;
	data[index]=data[used];
	++many_removed;
}
	else
		++index;
}
return many_removed;
}

template <class Item>
	bool bag<Item>::erase_one(const Item& target){
size_type index;

for(index=0;(index<used) and (data[index] != target);++index); //short circuit
	
if(index==used)
	return false;

--used;
data[index]=data[used];
return true;

}


template <class Item>
	void bag<Item>::insert(const value_type& entry){
if(used==capacity)
	reserve(used+1);

data[used]=entry;
++used;
}
template <class Item>
	void bag<Item>::operator +=(const bag<Item>& addend){
if(used+addend.used > capacity)
	reserve(used+addend.used);

copy(addend.data,addend.data+addend.used,data+used);
used+=addend.used;

}
template <class Item>
	void bag<Item>::operator =(const bag<Item>& source){
Item *new_data;
if(this==source)
	return;

if(capacity != source.capacity){
	new_data=new Item[source.capacity];
	delete [ ] data;
	data=new_data;
	capacity=source.capacity;
}

used=source.used;
copy(source.data,source.data+used,data);

}

	//FUNZIONI MEMBRO COSTANTI
template <class Item>
	typename bag<Item>::size_type bag<Item>::count(const value_type& target)const{
 size_type i,answer=0;
for(i=0;i<used;++i){
	if(data[i]==target)
		++answer;
	}

return answer;

}

template <class Item>
   bag<Item> operator +(const bag<Item>& b1, const bag<Item>& b2)
   {
	bag<Item> answer(b1.size( ) + b2.size( ));

	answer += b1;
	answer += b2;
	return answer;
   }


}




